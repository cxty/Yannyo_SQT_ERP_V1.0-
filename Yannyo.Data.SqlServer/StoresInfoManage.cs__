using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Yannyo.Data;
using Yannyo.Config;
using Yannyo.Common;
using Yannyo.Entity;

namespace Yannyo.Data.SqlServer
{
    public partial class DataProvider : IDataProvider
    {
        #region  StoresInfo
        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool ExistsStoresInfo(string sName)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) from tbStoresInfo");
            strSql.Append(" where sName=@sName ");
            SqlParameter[] parameters = {
					new SqlParameter("@sName", SqlDbType.VarChar,128)};
            parameters[0].Value = sName;

            return ((int)DbHelper.ExecuteScalar(CommandType.Text, strSql.ToString(), parameters)) > 0;
        }
        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool ExistsStoresInfoCode(string sCode)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select count(1) from tbStoresInfo");
            strSql.Append(" where sCode=@sCode ");
            SqlParameter[] parameters = {
					new SqlParameter("@sCode", SqlDbType.VarChar,50)};
            parameters[0].Value = sCode;

            return ((int)DbHelper.ExecuteScalar(CommandType.Text, strSql.ToString(), parameters)) > 0;
        }

        /// <summary>
        /// 增加一条数据
        /// </summary>
        public int AddStoresInfo(StoresInfo model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into tbStoresInfo(");
            strSql.Append("sName,sCode,sType,RegionID,sState,sAppendTime,YHsysID,sIsFZYH,sDoDay,sDoDayMoney,PaymentSystemID,CustomersClassID,PriceClassID,sContact,sTel,sAddress,sEmail)");
            strSql.Append(" values (");
            strSql.Append("@sName,@sCode,@sType,@RegionID,@sState,@sAppendTime,@YHsysID,@sIsFZYH,@sDoDay,@sDoDayMoney,@PaymentSystemID,@CustomersClassID,@PriceClassID,@sContact,@sTel,@sAddress,@sEmail)");
            strSql.Append(";select @@IDENTITY");
            SqlParameter[] parameters = {
					new SqlParameter("@sName", SqlDbType.VarChar,128),
					new SqlParameter("@sCode", SqlDbType.VarChar,50),
					new SqlParameter("@sType", SqlDbType.Char,1),
					new SqlParameter("@RegionID", SqlDbType.Int,4),
					new SqlParameter("@sState", SqlDbType.Int,4),
					new SqlParameter("@sAppendTime", SqlDbType.DateTime),
                    new SqlParameter("@YHsysID", SqlDbType.Int,4),
                    new SqlParameter("@sIsFZYH", SqlDbType.Int,4),
                                        new SqlParameter("@sDoDay", SqlDbType.Int,4),
                                        new SqlParameter("@sDoDayMoney", SqlDbType.Money),
                                        new SqlParameter("@PaymentSystemID", SqlDbType.Int,4),
                                        new SqlParameter("@CustomersClassID", SqlDbType.Int,4),
                                        new SqlParameter("@PriceClassID", SqlDbType.Int,4),
                                        new SqlParameter("@sContact", SqlDbType.VarChar,50),
                                        new SqlParameter("@sTel", SqlDbType.VarChar,50),
                                        new SqlParameter("@sAddress", SqlDbType.VarChar,512),
                                        new SqlParameter("@sEmail", SqlDbType.VarChar,50),};
            parameters[0].Value = model.sName;
            parameters[1].Value = model.sCode;
            parameters[2].Value = model.sType;
            parameters[3].Value = model.RegionID;
            parameters[4].Value = model.sState;
            parameters[5].Value = model.sAppendTime;
            parameters[6].Value = model.YHsysID;
            parameters[7].Value = model.sIsFZYH;
            parameters[8].Value = model.sDoDay;
            parameters[9].Value = model.sDoDayMoney;
            parameters[10].Value = model.PaymentSystemID;
            parameters[11].Value = model.CustomersClassID;
            parameters[12].Value = model.PriceClassID;
            parameters[13].Value = model.sContact;
            parameters[14].Value = model.sTel;
            parameters[15].Value = model.sAddress;
            parameters[16].Value = model.sEmail;

            object obj = DbHelper.ExecuteScalar(CommandType.Text,strSql.ToString(), parameters);
            if (obj == null)
            {
                return 1;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }
        /// <summary>
        /// 更新一条数据
        /// </summary>
        public void UpdateStoresInfo(StoresInfo model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update tbStoresInfo set ");
            strSql.Append("sName=@sName,");
            strSql.Append("sCode=@sCode,");
            strSql.Append("sType=@sType,");
            strSql.Append("RegionID=@RegionID,");
            strSql.Append("sState=@sState,");
            strSql.Append("YHsysID=@YHsysID,");
            strSql.Append("sIsFZYH=@sIsFZYH,");
            strSql.Append("sAppendTime=@sAppendTime,");
            strSql.Append("sDoDay=@sDoDay,");
            strSql.Append("sDoDayMoney=@sDoDayMoney,");
            strSql.Append("PaymentSystemID=@PaymentSystemID,");
            strSql.Append("CustomersClassID=@CustomersClassID,");
            strSql.Append("PriceClassID=@PriceClassID,");
            strSql.Append("sContact=@sContact,");
            strSql.Append("sTel=@sTel,");
            strSql.Append("sAddress=@sAddress,");
            strSql.Append("sEmail=@sEmail ");
            strSql.Append(" where StoresID=@StoresID ");
            SqlParameter[] parameters = {
					new SqlParameter("@StoresID", SqlDbType.Int,4),
					new SqlParameter("@sName", SqlDbType.VarChar,128),
					new SqlParameter("@sCode", SqlDbType.VarChar,50),
					new SqlParameter("@sType", SqlDbType.Char,1),
					new SqlParameter("@RegionID", SqlDbType.Int,4),
					new SqlParameter("@sState", SqlDbType.Int,4),
                    new SqlParameter("@YHsysID", SqlDbType.Int,4),
                    new SqlParameter("@sIsFZYH", SqlDbType.Int,4),
					new SqlParameter("@sAppendTime", SqlDbType.DateTime),
                                        new SqlParameter("@sDoDay", SqlDbType.Int,4),
                                        new SqlParameter("@sDoDayMoney", SqlDbType.Money),
                                        new SqlParameter("@PaymentSystemID", SqlDbType.Int,4),
                                        new SqlParameter("@CustomersClassID", SqlDbType.Int,4),
                                        new SqlParameter("@PriceClassID", SqlDbType.Int,4),
                                        new SqlParameter("@sContact", SqlDbType.VarChar,50),
                                        new SqlParameter("@sTel", SqlDbType.VarChar,50),
                                        new SqlParameter("@sAddress", SqlDbType.VarChar,512),
                                        new SqlParameter("@sEmail", SqlDbType.VarChar,50),};
            parameters[0].Value = model.StoresID;
            parameters[1].Value = model.sName;
            parameters[2].Value = model.sCode;
            parameters[3].Value = model.sType;
            parameters[4].Value = model.RegionID;
            parameters[5].Value = model.sState;
            parameters[6].Value = model.YHsysID;
            parameters[7].Value = model.sIsFZYH;
            parameters[8].Value = model.sAppendTime;
            parameters[9].Value = model.sDoDay;
            parameters[10].Value = model.sDoDayMoney;
            parameters[11].Value = model.PaymentSystemID;
            parameters[12].Value = model.CustomersClassID;
            parameters[13].Value = model.PriceClassID;
            parameters[14].Value = model.sContact;
            parameters[15].Value = model.sTel;
            parameters[16].Value = model.sAddress;
            parameters[17].Value = model.sEmail;

            DbHelper.ExecuteNonQuery(CommandType.Text,strSql.ToString(), parameters);
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public void DeleteStoresInfo(int StoresID)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from tbStoresInfo ");
            strSql.Append(" where StoresID=@StoresID ");
            SqlParameter[] parameters = {
					new SqlParameter("@StoresID", SqlDbType.Int,4)};
            parameters[0].Value = StoresID;

            DbHelper.ExecuteNonQuery(CommandType.Text,strSql.ToString(), parameters);
        }

        /// <summary>
        /// 删除一组数据
        /// </summary>
        public void DeleteStoresInfo(string StoresID)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from tbStoresInfo ");
            strSql.Append(" where StoresID in(" + StoresID + ") ");
            

            DbHelper.ExecuteNonQuery(CommandType.Text, strSql.ToString());
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public StoresInfo GetStoresInfoModel(int StoresID)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("select  top 1 StoresID,sName,sCode,sType,RegionID,sState,sAppendTime,YHsysID,sIsFZYH,sContact,sTel,sAddress,sEmail,(select yName from tbYHsysInfo where YHsysID=tbStoresInfo.[YHsysID]) as YHsysName,sDoDay,sDoDayMoney,PaymentSystemID,(select pName from tbPaymentSystemInfo where tbPaymentSystemInfo.PaymentSystemID=tbStoresInfo.PaymentSystemID) as PaymentSystemName,CustomersClassID,(select cClassName from tbCustomersClassInfo where CustomersClassID=tbStoresInfo.CustomersClassID) as CustomersClassName,PriceClassID,(select tbPriceClassInfo.pClassName from tbPriceClassInfo where tbPriceClassInfo.PriceClassID=tbStoresInfo.PriceClassID) as PriceClassName from tbStoresInfo ");
            strSql.Append(" where StoresID=@StoresID ");
            SqlParameter[] parameters = {
					new SqlParameter("@StoresID", SqlDbType.Int,4)};
            parameters[0].Value = StoresID;

            StoresInfo model = new StoresInfo();
            DataSet ds = DbHelper.ExecuteDataset(CommandType.Text, strSql.ToString(), parameters);
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["StoresID"].ToString() != "")
                {
                    model.StoresID = int.Parse(ds.Tables[0].Rows[0]["StoresID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["PaymentSystemID"].ToString() != "")
                {
                    model.PaymentSystemID = int.Parse(ds.Tables[0].Rows[0]["PaymentSystemID"].ToString());
                }
                model.PaymentSystemName = ds.Tables[0].Rows[0]["PaymentSystemName"].ToString();
                if (ds.Tables[0].Rows[0]["PriceClassID"].ToString() != "")
                {
                    model.PriceClassID = int.Parse(ds.Tables[0].Rows[0]["PriceClassID"].ToString());
                }
                model.PriceClassName = ds.Tables[0].Rows[0]["PriceClassName"].ToString();
                if (ds.Tables[0].Rows[0]["CustomersClassID"].ToString() != "")
                {
                    model.CustomersClassID = int.Parse(ds.Tables[0].Rows[0]["CustomersClassID"].ToString());
                }
                model.CustomersClassName = ds.Tables[0].Rows[0]["CustomersClassName"].ToString();

                model.sName = ds.Tables[0].Rows[0]["sName"].ToString();
                model.sCode = ds.Tables[0].Rows[0]["sCode"].ToString();
                model.sType = ds.Tables[0].Rows[0]["sType"].ToString();
                model.YHsysName = ds.Tables[0].Rows[0]["YHsysName"].ToString();
                if (ds.Tables[0].Rows[0]["YHsysID"].ToString() != "")
                {
                    model.YHsysID = int.Parse(ds.Tables[0].Rows[0]["YHsysID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sIsFZYH"].ToString() != "")
                {
                    model.sIsFZYH = int.Parse(ds.Tables[0].Rows[0]["sIsFZYH"].ToString());
                }
                if (ds.Tables[0].Rows[0]["RegionID"].ToString() != "")
                {
                    model.RegionID = int.Parse(ds.Tables[0].Rows[0]["RegionID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sState"].ToString() != "")
                {
                    model.sState = int.Parse(ds.Tables[0].Rows[0]["sState"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sAppendTime"].ToString() != "")
                {
                    model.sAppendTime = DateTime.Parse(ds.Tables[0].Rows[0]["sAppendTime"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sDoDay"].ToString() != "")
                {
                    model.sDoDay = int.Parse(ds.Tables[0].Rows[0]["sDoDay"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sDoDayMoney"].ToString() != "")
                {
                    model.sDoDayMoney = decimal.Parse(ds.Tables[0].Rows[0]["sDoDayMoney"].ToString());
                }
                model.sContact = ds.Tables[0].Rows[0]["sContact"].ToString();
                model.sTel = ds.Tables[0].Rows[0]["sTel"].ToString();
                model.sAddress = ds.Tables[0].Rows[0]["sAddress"].ToString();
                model.sEmail = ds.Tables[0].Rows[0]["sEmail"].ToString();

                return model;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public StoresInfo GetStoresInfoModelByName(string sName)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("select  top 1 StoresID,sName,sCode,sType,RegionID,sState,sAppendTime,YHsysID,sIsFZYH,sContact,sTel,sAddress,sEmail,(select yName from tbYHsysInfo where YHsysID=tbStoresInfo.[YHsysID]) as YHsysName,sDoDay,sDoDayMoney,PaymentSystemID,(select pName from tbPaymentSystemInfo where tbPaymentSystemInfo.PaymentSystemID=tbStoresInfo.PaymentSystemID) as PaymentSystemName,CustomersClassID,(select cClassName from tbCustomersClassInfo where CustomersClassID=tbStoresInfo.CustomersClassID) as CustomersClassName,PriceClassID,(select tbPriceClassInfo.pClassName from tbPriceClassInfo where tbPriceClassInfo.PriceClassID=tbStoresInfo.PriceClassID) as PriceClassName from tbStoresInfo ");
            strSql.Append(" where sName=@sName ");
            SqlParameter[] parameters = {
					new SqlParameter("@sName", SqlDbType.VarChar,128)};
            parameters[0].Value = sName;

            StoresInfo model = new StoresInfo();
            DataSet ds = DbHelper.ExecuteDataset(CommandType.Text, strSql.ToString(), parameters);
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["StoresID"].ToString() != "")
                {
                    model.StoresID = int.Parse(ds.Tables[0].Rows[0]["StoresID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["PaymentSystemID"].ToString() != "")
                {
                    model.PaymentSystemID = int.Parse(ds.Tables[0].Rows[0]["PaymentSystemID"].ToString());
                }
                model.PaymentSystemName = ds.Tables[0].Rows[0]["PaymentSystemName"].ToString();
                if (ds.Tables[0].Rows[0]["PriceClassID"].ToString() != "")
                {
                    model.PriceClassID = int.Parse(ds.Tables[0].Rows[0]["PriceClassID"].ToString());
                }
                model.PriceClassName = ds.Tables[0].Rows[0]["PriceClassName"].ToString();
                if (ds.Tables[0].Rows[0]["CustomersClassID"].ToString() != "")
                {
                    model.CustomersClassID = int.Parse(ds.Tables[0].Rows[0]["CustomersClassID"].ToString());
                }
                model.CustomersClassName = ds.Tables[0].Rows[0]["CustomersClassName"].ToString();

                model.sName = ds.Tables[0].Rows[0]["sName"].ToString();
                model.sCode = ds.Tables[0].Rows[0]["sCode"].ToString();
                model.sType = ds.Tables[0].Rows[0]["sType"].ToString();
                model.YHsysName = ds.Tables[0].Rows[0]["YHsysName"].ToString();
                if (ds.Tables[0].Rows[0]["YHsysID"].ToString() != "")
                {
                    model.YHsysID = int.Parse(ds.Tables[0].Rows[0]["YHsysID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sIsFZYH"].ToString() != "")
                {
                    model.sIsFZYH = int.Parse(ds.Tables[0].Rows[0]["sIsFZYH"].ToString());
                }
                if (ds.Tables[0].Rows[0]["RegionID"].ToString() != "")
                {
                    model.RegionID = int.Parse(ds.Tables[0].Rows[0]["RegionID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sState"].ToString() != "")
                {
                    model.sState = int.Parse(ds.Tables[0].Rows[0]["sState"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sAppendTime"].ToString() != "")
                {
                    model.sAppendTime = DateTime.Parse(ds.Tables[0].Rows[0]["sAppendTime"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sDoDay"].ToString() != "")
                {
                    model.sDoDay = int.Parse(ds.Tables[0].Rows[0]["sDoDay"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sDoDayMoney"].ToString() != "")
                {
                    model.sDoDayMoney = decimal.Parse(ds.Tables[0].Rows[0]["sDoDayMoney"].ToString());
                }
                model.sContact = ds.Tables[0].Rows[0]["sContact"].ToString();
                model.sTel = ds.Tables[0].Rows[0]["sTel"].ToString();
                model.sAddress = ds.Tables[0].Rows[0]["sAddress"].ToString();
                model.sEmail = ds.Tables[0].Rows[0]["sEmail"].ToString();

                return model;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public StoresInfo GetStoresInfoModelByCode(string sCode)
        {

            StringBuilder strSql = new StringBuilder();
            strSql.Append("select  top 1 StoresID,sName,sCode,sType,RegionID,sState,sAppendTime,YHsysID,sIsFZYH,sContact,sTel,sAddress,sEmail,(select yName from tbYHsysInfo where YHsysID=tbStoresInfo.[YHsysID]) as YHsysName,sDoDay,sDoDayMoney,PaymentSystemID,(select pName from tbPaymentSystemInfo where tbPaymentSystemInfo.PaymentSystemID=tbStoresInfo.PaymentSystemID) as PaymentSystemName,CustomersClassID,(select cClassName from tbCustomersClassInfo where CustomersClassID=tbStoresInfo.CustomersClassID) as CustomersClassName,PriceClassID,(select tbPriceClassInfo.pClassName from tbPriceClassInfo where tbPriceClassInfo.PriceClassID=tbStoresInfo.PriceClassID) as PriceClassName from tbStoresInfo ");
            strSql.Append(" where sCode=@sCode ");
            SqlParameter[] parameters = {
					new SqlParameter("@sCode", SqlDbType.VarChar,50)};
            parameters[0].Value = sCode;

            StoresInfo model = new StoresInfo();
            DataSet ds = DbHelper.ExecuteDataset(CommandType.Text, strSql.ToString(), parameters);
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["StoresID"].ToString() != "")
                {
                    model.StoresID = int.Parse(ds.Tables[0].Rows[0]["StoresID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["PaymentSystemID"].ToString() != "")
                {
                    model.PaymentSystemID = int.Parse(ds.Tables[0].Rows[0]["PaymentSystemID"].ToString());
                }
                model.PaymentSystemName = ds.Tables[0].Rows[0]["PaymentSystemName"].ToString();
                if (ds.Tables[0].Rows[0]["PriceClassID"].ToString() != "")
                {
                    model.PriceClassID = int.Parse(ds.Tables[0].Rows[0]["PriceClassID"].ToString());
                }
                model.PriceClassName = ds.Tables[0].Rows[0]["PriceClassName"].ToString();
                if (ds.Tables[0].Rows[0]["CustomersClassID"].ToString() != "")
                {
                    model.CustomersClassID = int.Parse(ds.Tables[0].Rows[0]["CustomersClassID"].ToString());
                }
                model.CustomersClassName = ds.Tables[0].Rows[0]["CustomersClassName"].ToString();

                model.sName = ds.Tables[0].Rows[0]["sName"].ToString();
                model.sCode = ds.Tables[0].Rows[0]["sCode"].ToString();
                model.sType = ds.Tables[0].Rows[0]["sType"].ToString();
                model.YHsysName = ds.Tables[0].Rows[0]["YHsysName"].ToString();
                if (ds.Tables[0].Rows[0]["YHsysID"].ToString() != "")
                {
                    model.YHsysID = int.Parse(ds.Tables[0].Rows[0]["YHsysID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sIsFZYH"].ToString() != "")
                {
                    model.sIsFZYH = int.Parse(ds.Tables[0].Rows[0]["sIsFZYH"].ToString());
                }
                if (ds.Tables[0].Rows[0]["RegionID"].ToString() != "")
                {
                    model.RegionID = int.Parse(ds.Tables[0].Rows[0]["RegionID"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sState"].ToString() != "")
                {
                    model.sState = int.Parse(ds.Tables[0].Rows[0]["sState"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sAppendTime"].ToString() != "")
                {
                    model.sAppendTime = DateTime.Parse(ds.Tables[0].Rows[0]["sAppendTime"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sDoDay"].ToString() != "")
                {
                    model.sDoDay = int.Parse(ds.Tables[0].Rows[0]["sDoDay"].ToString());
                }
                if (ds.Tables[0].Rows[0]["sDoDayMoney"].ToString() != "")
                {
                    model.sDoDayMoney = decimal.Parse(ds.Tables[0].Rows[0]["sDoDayMoney"].ToString());
                }
                model.sContact = ds.Tables[0].Rows[0]["sContact"].ToString();
                model.sTel = ds.Tables[0].Rows[0]["sTel"].ToString();
                model.sAddress = ds.Tables[0].Rows[0]["sAddress"].ToString();
                model.sEmail = ds.Tables[0].Rows[0]["sEmail"].ToString();

                return model;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetStoresInfoList(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select StoresID,sName,sCode,sType,RegionID,sState,sAppendTime,YHsysID,sIsFZYH,sContact,sTel,sAddress,sEmail,(select yName from tbYHsysInfo where YHsysID=tbStoresInfo.[YHsysID]) as YHsysName,sDoDay,sDoDayMoney,PaymentSystemID,(select pName from tbPaymentSystemInfo where tbPaymentSystemInfo.PaymentSystemID=tbStoresInfo.PaymentSystemID) as PaymentSystemName,CustomersClassID,(select cClassName from tbCustomersClassInfo where CustomersClassID=tbStoresInfo.CustomersClassID) as CustomersClassName,PriceClassID,(select tbPriceClassInfo.pClassName from tbPriceClassInfo where tbPriceClassInfo.PriceClassID=tbStoresInfo.PriceClassID) as PriceClassName ");
            strSql.Append(" FROM tbStoresInfo ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            return DbHelper.ExecuteDataset(CommandType.Text,strSql.ToString());
        }

        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public DataTable GetStoresInfoList(int PageSize, int PageIndex, string strWhere, out int pagetotal, int OrderType, string showFName)
        {
            SqlParameter[] parameters = {
                    new SqlParameter("@tblName", SqlDbType.VarChar, 255),
                    new SqlParameter("@fldName", SqlDbType.VarChar, 255),
                    new SqlParameter("@PageSize", SqlDbType.Int),
                    new SqlParameter("@PageIndex", SqlDbType.Int),
                    new SqlParameter("@IsReCount", SqlDbType.Bit),
                    new SqlParameter("@OrderType", SqlDbType.Bit),
                    new SqlParameter("@strWhere", SqlDbType.VarChar,1000),
                    new SqlParameter("@showFName", SqlDbType.VarChar,1000),
                    };
            parameters[0].Value = "tbStoresInfo";
            parameters[1].Value = "StoresID";
            parameters[2].Value = PageSize;
            parameters[3].Value = PageIndex;
            parameters[4].Value = 1;
            parameters[5].Value = OrderType;
            parameters[6].Value = strWhere;
            parameters[7].Value = showFName + ",(select cClassName from tbCustomersClassInfo where CustomersClassID=tbStoresInfo.CustomersClassID) as CustomersClassName,(select tbPriceClassInfo.pClassName from tbPriceClassInfo where tbPriceClassInfo.PriceClassID=tbStoresInfo.PriceClassID) as PriceClassName ";
            DataSet ds = DbHelper.ExecuteDataset(CommandType.StoredProcedure, "UP_" + BaseConfigs.GetTablePrefix + "GetRecordByPage", parameters);
            if (ds.Tables.Count > 1)
            {
                int total = (int)ds.Tables[0].Rows[0][0];

                if (total % PageSize == 0)
                {
                    pagetotal = total / PageSize;
                }
                else
                {
                    pagetotal = total / PageSize + 1;
                }
                return ds.Tables[1];
            }
            else
            {
                pagetotal = 0;
                return null;
            }
        }
        /// <summary>
        /// 导出数据
        /// </summary>
        /// <param name="bDate"></param>
        /// <param name="eDate"></param>
        /// <returns></returns>
        public DataTable getExportDate(DateTime bDate, DateTime eDate)
        {
             StringBuilder btr = new StringBuilder();
             btr.Append("  select si.sName,isnull(qq.oMoney,0) as oMoney from (");
             btr.Append("    select oi.StoresID,isnull(sum(oli.oMoney),0) as oMoney from tbOrderInfo as oi left join tbOrderListInfo as oli on oi.OrderID=oli.OrderID");
             btr.Append("    where oi.oType=3 and oi.oState=0 and oli.oWorkType=2 and oi.OrderID in (select OrderID from tbOrderWorkingLogInfo where oType=5 and ");
             btr.Append("  DATEDIFF(MONTH,pAppendTime,'"+bDate+"')=0) group by oi.StoresID) as qq left join tbStoresInfo as si on qq.StoresID=si.StoresID");

             return DbHelper.ExecuteDataset(CommandType.Text, btr.ToString()).Tables[0];
        }
        #endregion
    }
}
